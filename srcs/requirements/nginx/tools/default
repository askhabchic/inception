 server {
    listen 443 ssl;
    listen [::]:443 ssl;  # IPv6-адреса (0.7.36) задаются в квадратных скобках
    server_name fhyman.42.fr localhost www.localhost 127.0.0.1;

    ssl on;
    ssl_protocols TLSv1.2; 
    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

    root /var/www/wordpress;
    autoindex on;

    index index.php;

	location / {
		try_files $uri $uri/ =404; #проверить есть ли файл из запроса на диске, иначе - вернуть ошибку 404
	}

    #location @php {
    #}
    # adminer
 #   location /adminer {
 #       index adminer.php ;
 #           location ~ \.php$ {
 #           #include snippets/fastcgi-php.conf;
 #           fastcgi_index adminer.php;
 #           fastcgi_pass adminer:9000;
 #           }
 #   }
    # wordpress
	location ~ \.php$ {
		include snippets/fastcgi-php.conf;
        #Настройки порта или сокета PHP-FPM производятся в файле "/etc/php5/fpm/pool.d/www.conf"
		fastcgi_pass wordpress:9000;
	}
    # website
    location /web {
        index index.html;
        return 301 https://fhyman.42.fr/index.html;
    }
 }

# server Задаёт конфигурацию для виртуального сервера. Чёткого разделения виртуальных 
# серверов на IP-based (на основании IP-адреса) и name-based (на основании поля
# “Host” заголовка запроса) нет. Вместо этого директивами listen описываются все
# адреса и порты, на которых нужно принимать соединения для этого сервера, 
# а в директиве server_name указываются все имена серверов.
 
# root: наша директива root назначает имя корневой директории 
# для запросов к нашему серверу. Эта директория, /var/www/html, 
# создается в качестве точки монтирования в момент сборки с помощью
#  инструкций в Dockerfile WordPress. Эти инструкции Dockerfile 
# также гарантируют, что файлы релиза WordPress монтируются в этот том.

# index: директива index определяет файлы, которые будут использоваться
#  в качестве индексов при обработке запросов к вашему серверу. 
# Здесь мы изменили порядок приоритета по умолчанию, поставив 
# index.php перед index.html, в результате чего Nginx будет 
# давать приоритет файлам с именем index.php при наличии возможности.

# location /: в этом блоке расположения мы будем использовать 
# директиву try_files для проверки файлов, соответствующих 
# отдельным запросам URI. Вместо того, чтобы возвращать по 
# умолчанию статус 404 не найдено, мы будем передавать контроль 
# файлу index.php Wordpress с аргументами запроса.

# $uri - текущий URI запроса в нормализованном виде
# Значение $uri может изменяться в процессе обработки запроса, например, 
# при внутренних перенаправлениях или при использовании индексных файлов.

# location ~\.php$: этот блок расположения будет обрабатывать
#  PHP-запросы и проксировать эти запросы в наш контейнер 
# wordpress. Поскольку наш образ WordPress Docker будет опираться 
# на образ php:fpm, мы также добавим параметры конфигурации, 
# принадлежащие протоколу FastCGI, в этот блок. Nginx требует 
# наличия независимого процессора PHP для запросов PHP: в нашем 
# случае эти запросы будут обрабатываться процессором php-fpm, 
# который будет включать образ php:fpm. Кроме того, этот блок 
# расположения содержит директивы FastCGI, переменные и опции, 
# которые будут проксировать запросы для приложения WordPress, 
# запущенного в нашем контейнере wordpress, задавать предпочитаемый 
# индекс захваченного URI запроса, а также выполнять парсинг URI-запросов.

# Задаёт имя файла, который при создании переменной $fastcgi_script_name будет добавляться 
# после URI, если URI заканчивается слэшом. Например, при таких настройках
# fastcgi_index index.php;
# fastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;
# и запросе “/page.php” параметр SCRIPT_FILENAME будет равен “/home/www/scripts/php/page.php”, 
# а при запросе “/” - “/home/www/scripts/php/index.php”.

# Таким образом будет настроен сервер, который будет перенаправлять все запросы, кроме запросов
# статических изображений, на проксируемый сервер, работающий по адресу localhost:9000, по протоколу FastCGI.
# Задаёт адрес FastCGI-сервера. Адрес может быть указан в виде доменного имени или IP-адреса, и порта:
# fastcgi_pass localhost:9000;
# или в виде пути UNIX-сокета:
# fastcgi_pass unix:/tmp/fastcgi.socket;
# Если доменному имени соответствует несколько адресов, то все они будут использоваться по 
# очереди (round-robin). И, кроме того, адрес может быть группой серверов.

# В значении параметра можно использовать переменные. В этом случае, если адрес указан
# в виде доменного имени, имя ищется среди описанных групп серверов и если не найдено,
# то определяется с помощью resolver’а.